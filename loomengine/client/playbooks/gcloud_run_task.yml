---
- name: Gather information needed to create the worker instance.
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files:
  - vars/common.yml
  - vars/gcloud_worker.yml
  tasks:
    - name: Find the cheapest instance type that has at least the cores and memory needed by the task.
      command: python -c "import gcloud_utils; gcloud_utils.get_cheapest_instance_type({{cores}}, {{memory}})"
      args:
        chdir: "{{playbook_dir}}/files"
      register: instance_type_result
    - name: Create a GCP-safe name for the worker instance.
      command: python -c "import gcloud_utils; gcloud_utils.get_worker_name('{{server_name}}','{{step_name}},'{{task_attempt_id}})'"
      args:
        chdir: "{{playbook_dir}}/files"
      register: worker_name_result
    - name: Set vars for downstream tasks.
      set_fact:
        instance_type: instance_type_result.stdout
        instance_name: worker_name_result.stdout
        scratch_disk_name: "{{instance_name}}-disk"

- name: Create a new instance for the Loom worker.
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files:
  - vars/common.yml
  - vars/gcloud_worker.yml
  tasks:
  - include: tasks/gcloud_create_instance.yml
  - include: tasks/gcloud_configure_instance_ssh.yml

- name: Install Docker on the Loom worker.
  hosts: "{{instance_name}}"
  become: yes
  roles:
  - {role: docker, when: "not {{lookup('env', 'LOOM_GCLOUD_WORKER_SKIP_INSTALLS')}}"}
  - {role: docker-py, when: "not {{lookup('env', 'LOOM_GCLOUD_WORKER_SKIP_INSTALLS')}}"}
  tasks:
  - include: tasks/gcloud_create_docker_group.yml

- name: Pull Docker images on the new instance.
  hosts: "{{instance_name}}"
  become: yes
  vars_files:
  - vars/common.yml
  - vars/gcloud_worker.yml
  tasks:
  - include: tasks/pull_worker_docker_images.yml

- name: Run the Loom task runner on the specified worker instance.
  hosts: "{{instance_name}}"
  become: yes
  vars_files:
  - vars/common.yml
  - vars/gcloud_worker.yml
  vars:
    task_attempt_id: "{{lookup('env', 'LOOM_TASK_ATTEMPT_ID')}}"
    worker_log_file: "loom_taskrunner.log"
    working_dir: "{{scratch_disk_mount_point}}/{{task_attempt_id}}"
  tasks:
  - name: Run the Loom task runner.
    docker_container:
      name: "{{taskrunner_container_name}}-{{task_attempt_id}}"
      image: "{{loom_docker_image}}"
      volumes: [{{scratch_disk_mount_point}}:{{scratch_disk_mount_point}}", "/var/run/docker.sock:/var/run/docker.sock"]
      api_version: auto
      network_mode: host
      command: /bin/bash -c 'loom-taskrunner --task_attempt_id {{task_attempt_id}} --master_url {{server_url}} --log_level {{log_level}} --log_file {{working_dir}}/{{worker_log_file}} --working_dir {{working_dir}}'
