import uuid
from django.http import JsonResponse
from django.shortcuts import render
from django.core import serializers
from django.views.decorators.csrf import csrf_exempt
from .helpers.runrequest import RunRequestHelper
from .helpers.runrequest import RunRequestValidationError
#from apps.analysis.models import AnalysisRequest

from apps.analysis.models import Analysis
from apps.analysis.models import Pipeline
from apps.analysis.models import Session

import json

def status(request):
    return JsonResponse({}, status=200)

# return the analysis json file upon request
def analysis_queue(request):
    data_json = request.body
    return JsonResponse(Analysis.objects.all()[0].prepareJSON(), safe=False, status=200)
    #return JsonResponse(serializers.serialize('json', Session.objects.all()), safe=False, status=200)

@csrf_exempt
def run(request):
    data_json = request.body
    try:
        data = json.loads(data_json)
    except ValueError:
        return JsonResponse({"message": 'Error: Input is not in valid JSON format: "%s"' % request.body}, status=400)

    try:
        clean_data_json = RunRequestHelper.clean_json(data_json)
    except RunRequestValidationError as e:
        return JsonResponse({"message": 'Error validating the run request. "%s"' % e.message}, status=400)
    

    # AnalysisRequest.create(clean_data_json)
    # TODO a test run request
    # parsing the json input
    query = json.loads(data_json)
    pipeline = Pipeline(pipelineid="test", pipelinename="tst_pipeline", comment="")
    pipeline.jsonToClass( query )
    pipeline.save()

    # send the pipeline into queue system
    analysis = Analysis(analysisid=str(uuid.uuid1()), pipeline=pipeline, comment="autogenerated", ownerid=0)
    analysis.save()
    analysis_id = analysis.analysisid
    msg = "start analysis: "+analysis_id
    return JsonResponse({'analysis_id':analysis_id,'comment':msg}, status=200)
    #return JsonResponse({"message": "A valid analysis run request was received."}, status=200)
    
